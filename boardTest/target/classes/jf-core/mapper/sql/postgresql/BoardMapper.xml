<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="peg.board.mapper.BoardMapper">

    <!-- 게시판 목록을 조회하는 쿼리. + 검색 기능
    	 원글은 작성된 역순으로 정렬하고
    	 답글은 작성된 순으로 정렬한다.
    ============================================
	글번호	제목						사용자명
	78		aaaa					user1
	104		    ㄴ aaaa의 답글1			mem1
	105		    ㄴ aaaa의 답글2			mem2
	107		        ㄴ aaaa의 답글2-1		mem1
	108		        ㄴ aaaa의 답글2-2		user1
	105		   ㄴ aaaa의 답글3			mem3
	77		bbbbb					mem2
	============================================
	
	postgre 계층형 구조를 위한 쿼리
	with recursive view이름(보여주고 싶은 컬럼){
		부모 쿼리 작성, 데이터 시작 조건을 구하는 쿼리
		union all
		계층구조 작성, 하위 데이터를 찾아가기 위한 반복 쿼리
	} select * from 뷰명;
	
	level : 계층형 구조에서 단계, 레벨을 나타내는 함수
	cycle : recursive를 통한 재귀 쿼리 수행시 성능 상의 문제를 해결하기 위해 사용.
			path 배열에 저장된 ID값이 있는지 확인하여 이미 찾은 값에 대해서는 데이터 검색을 수행하지 않도록 한다.
    
     -->
    <select id="boardList" resultType="peg.board.vo.BoardVO" parameterType="peg.board.vo.Page">
       
        WITH RECURSIVE boardlist(idx, groupno, title, writer, indate, count, secret, groupdepth, level, path, cycle) AS (
		
		    select b.idx, b.groupno, b.title, b.writer, b.indate, b.count, b.secret, b.groupdepth, 0, ARRAY [b.idx], false
		    FROM board b
		    WHERE b.groupno = 0 
		    
		    UNION ALL
		    
		    SELECT b.idx, b.groupno, b.title, b.writer, b.indate, b.count, b.secret, b.groupdepth, level + 1, path || b.idx, b.idx = ANY (path)
		    FROM board b, boardlist blist
		    WHERE b.groupno = blist.idx
		    AND NOT CYCLE
		
		)SELECT idx, groupno, title, writer, indate, count, secret, groupdepth, level, path
		 FROM boardlist
        
        <!-- 검색 기능을 위한 쿼리-->
        <if test="searchType=='title'">
			where title like concat('%',#{keyword},'%')            
        </if>
        <if test="searchType=='writer'">
			where writer like concat('%',#{keyword},'%')            
        </if>
        <if test="searchType=='contents'">
			where contents like concat('%',#{keyword},'%')            
        </if>
		
        <!-- path(배열)을 이용하여 정렬.  -->
        ORDER BY path[1:1] desc, path[2:] asc
		limit #{perPageNum}
		offset ( #{currentPage} - 1 ) * #{perPageNum}
    </select>
    
	<select id="boardcount" parameterType="peg.board.vo.Page" resultType="int">
	    select count(*)
	    from board
	    <if test="searchType=='title'">
			where title like concat('%',#{keyword},'%')            
        </if>
        <if test="searchType=='writer'">
			where writer like concat('%',#{keyword},'%')            
        </if>
        <if test="searchType=='contents'">
			where contents like concat('%',#{keyword},'%')            
        </if>
	</select>
  
	
	<!-- 1. 답글인 경우(groupno의 값이 있는 경우) groupdepth에 +1을 한다.
		 2. 일반 게시글은 경우 groupno와 groupdepth를 0으로 한다. 
	 -->
  	<insert id="boardInsert" parameterType="peg.board.vo.BoardVO" useGeneratedKeys="true" keyProperty="idx">
  		insert into board(title, contents,writer,secret,groupno,groupdepth)
  		values(#{title},#{contents},#{writer},#{secret},
  			<choose>
  			    <when test="groupno != null">
  			        #{groupno}, #{groupdepth}+1
  			    </when>
  			    <otherwise>
  			        0,0
  			    </otherwise>
  			</choose>
  		)
  	</insert>
  
 	 <select id="boardContents" parameterType="int" resultType="peg.board.vo.BoardVO">
   	   select idx, title, writer, contents, indate, count, secret, groupno, groupdepth 
   	   from board 
   	   where idx = #{idx}
 	 </select>
  
 	 <update id="boardUpdate" parameterType="peg.board.vo.BoardVO">
    	update board 
    	set title=#{title}, contents=#{contents}
      	where idx=#{idx}
  	</update>
  	
 	 <delete id="boardDelete" parameterType="int">
 	     delete 
 	     from board 
 	     where idx=#{idx}
 	 </delete>
 	 
 	 <update id="boardTWUpdateAjax" parameterType="peg.board.vo.BoardVO">
 	     update board 
 	     set title=#{title}, writer=#{writer} 
 	     where idx=#{idx}
 	 </update>
 	 
 	 <update id="countUpdate" parameterType="int">
 	     update board 
 	     set count = count + 1 
 	     where idx=#{idx}
 	 </update>
 	 
 	 <!-- 비밀 답글의 원글 작성자 찾기 -->
  	<select id="findWriter" parameterType="int" resultType="String">
  	    select b.writer
		from board b
		inner join board b2 on
			b.idx = b2.groupno
		where b2.groupno = #{groupno}
		group by b.writer
  	</select>
 	 
 	 
 	 <!-- 첨부 파일 -->
 	 
 	 <insert id="addfile" parameterType="peg.board.vo.FileVO">
 	     insert into filelist(idx, originalName, filename)
 	     values(#{idx}, #{originalName}, #{filename})
 	 </insert>
 	 
 	 <select id="fileList" parameterType="int" resultType="peg.board.vo.FileVO">
 	     select idx, originalName, filename
 	     from filelist
 	     where idx = #{idx}
 	 </select>
 	 
 	 <insert id="insertfile" parameterType="java.util.List">
 	     <foreach collection="list" item="item" separator=";">
 	     	insert into filelist(idx, originalName, filename, filepath)
 	     	values (#{item.idx}, #{item.originalName}, #{item.filename}, #{item.filepath})
 	     </foreach>
 	 </insert>
 	 <select id="selectfile" parameterType="String" resultType="peg.board.vo.FileVO">
 	     select idx, originalName, filename, filepath
 	     from filelist
 	     where filename like #{filename}
 	 </select>
 	 
</mapper>