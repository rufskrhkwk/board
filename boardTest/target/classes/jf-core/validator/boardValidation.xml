<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
<!-- 
	전자정부표준프레임워크는 폼 검증에 Jakarta Commons Validator를 사용한다.
	전자정부표준프레임워크 샘플에는 기본적으로 Jakarta Commons Validator와 spring-modules-validation 라이브러리가 포함되어 있다.
	* Spring Boot supports seamless integration with custom validators, the de-facto standard for performing validation is Hibernate Validator.
	Jakarta Commons Validator는 각종 검증 규칙을 xml 파일로 작성.
	 검증 규칙은 Java 클래스 및 Javascript에 제공되어 서버측/클라이언트측 검증 모두에서 사용되어 집니다.
	 VO 또는 DTO를 만들고 그 이름과 매칭이 되게 작성해야합니다.(map을 사용하여 DB와 연동하는 경우 사용할 수 없음.)
	 
	<validator name="검증 규칙"
          classname="검증을 수행할 클래스명"
			 method="classname으로 지덩된 클래스에서 검증을 수행하는 메소드"
	   methodParams="검증을 수행할 메소드의 파라미터"
				msg="에러메세지의 key값">
     	<javascript><![CDATA[
			function validateRequired(form) {
				클라이언트측 검증을 수행할 자바스크립트.
			 	method 속성에 지정된 것과 같은 함수명입니다.
			}
		]]>
		</javascript>
	</validator>  
	 
	 

 -->
 
<form-validation>

	<global>
		<!-- 필수값 체크 예시 -->
		<validator name="required"
              classname="org.springmodules.validation.commons.FieldChecks"
                 method="validateRequired"
           methodParams="java.lang.Object,
                         org.apache.commons.validator.ValidatorAction,
                         org.apache.commons.validator.Field,
                         org.springframework.validation.Errors"
                   msg="errors.required">

			<javascript><![CDATA[
				function validateRequired(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oRequired = new required();                                
                for (x in oRequired) {
                var field = form[oRequired[x][0]];                 

           if ((field.type == 'hidden' ||
               field.type == 'text' ||
               field.type == 'textarea' ||
               field.type == 'file' ||
               field.type == 'radio' ||
               field.type == 'checkbox' ||
               field.type == 'select-one' ||
               field.type == 'password')) {
               var value = '';
               // get field's value
               if (field.type == "select-one") {
                   var si = field.selectedIndex;
                   if (si >= 0) {
                       value = field.options[si].value;
                   }
               } else if (field.type == 'radio' || field.type == 'checkbox') {
                   if (field.checked) {
                       value = field.value;
                   }
               } else {
                   value = field.value;
               }
               if (trim(value).length == 0) {
                   if ((i == 0) && (field.type != 'hidden')) {
                       focusField = field;
                   }
                   fields[i++] = oRequired[x][1];
                   isValid = false;
               }
           } else if (field.type == "select-multiple") { 
               var numOptions = field.options.length;
               lastSelected=-1;
               for(loop=numOptions-1;loop>=0;loop--) {
                   if(field.options[loop].selected) {
                       lastSelected = loop;
                       value = field.options[loop].value;
                       break;
                   }
               }
               if(lastSelected < 0 || trim(value).length == 0) {
                   if(i == 0) {
                       focusField = field;
                   }
                   fields[i++] = oRequired[x][1];
                   isValid=false;
               }
           } else if ((field.length > 0) && (field[0].type == 'radio' || field[0].type == 'checkbox')) {
               isChecked=-1;
               for (loop=0;loop < field.length;loop++) {
                   if (field[loop].checked) {
                       isChecked=loop;
                       break; // only one needs to be checked
                   }
               }
               if (isChecked < 0) {
                   if (i == 0) {
                       focusField = field[0];
                   }
                   fields[i++] = oRequired[x][1];
                   isValid=false;
               }
           }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }
            
            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
			]]>
			</javascript>
		</validator>
		
		<validator name="maxlength"
            classname="org.springmodules.validation.commons.FieldChecks"
               method="validateMaxLength"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.springframework.validation.Errors"
                       
              depends=""
                  msg="errors.maxlength">

         <javascript><![CDATA[
            function validateMaxLength(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oMaxLength = new maxlength();
                for (x in oMaxLength) {
                    var field = form[oMaxLength[x][0]];
                    
                    if (field.type == 'text' ||
                        field.type == 'textarea') {
                        
                        var iMax = parseInt(oMaxLength[x][2]("maxlength"));
                        if (field.value.length > iMax) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oMaxLength[x][1];
                            isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }]]>
         </javascript>

      </validator>
		
	</global>

</form-validation>